name: Build and Release

on:
  push:
    branches: ["main"]
  workflow_dispatch:  # Allows manual trigger from GitHub UI

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install dependencies (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev
      
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      
      - name: Install frontend dependencies
        run: npm install
      
      - name: Build frontend
        run: npm run build
      
      - name: Build Tauri (Linux)
        run: |
          cd src-tauri
          cargo build --release
      
      - name: Create artifacts directory
        run: mkdir -p artifacts
      
      - name: Copy Linux binary
        run: |
          cp src-tauri/target/release/track-it artifacts/track-it-linux-x86_64
          chmod +x artifacts/track-it-linux-x86_64
      
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-binary
          path: artifacts/track-it-linux-x86_64

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      
      - name: Install frontend dependencies
        run: npm install
      
      - name: Build frontend
        run: npm run build
      
      - name: Build Tauri (Windows)
        run: |
          cd src-tauri
          cargo build --release
      
      - name: Create artifacts directory
        run: mkdir -p artifacts
      
      - name: Copy Windows binary
        run: |
          cp src-tauri/target/release/track-it.exe artifacts/track-it-windows-x86_64.exe
      
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-binary
          path: artifacts/track-it-windows-x86_64.exe

  build-android:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install Android targets
        run: |
          rustup target add aarch64-linux-android
          rustup target add armv7-linux-androideabi
          rustup target add i686-linux-android
          rustup target add x86_64-linux-android
      
      - name: Install cargo-ndk
        run: cargo install cargo-ndk
      
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      
      - name: Install frontend dependencies
        run: npm install
      
      - name: Build frontend
        run: npm run build
      
      - name: Setup Android NDK
        run: |
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk-bundle" >> $GITHUB_ENV
          echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk-bundle" >> $GITHUB_ENV
      
      - name: Install Android NDK
        run: |
          # Use the correct path for cmdline-tools
          SDKMANAGER="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          if [ ! -f "$SDKMANAGER" ]; then
            # Fallback to versioned path if latest doesn't exist
            SDKMANAGER=$(find $ANDROID_SDK_ROOT/cmdline-tools -name sdkmanager | head -n 1)
          fi
          $SDKMANAGER --install "ndk;25.1.8937393"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.1.8937393" >> $GITHUB_ENV
          echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.1.8937393" >> $GITHUB_ENV
      
      - name: Build Android APK
        run: |
          cd src-tauri
          cd gen/android
          ./gradlew assembleRelease
      
      - name: Create artifacts directory
        run: mkdir -p artifacts
      
      - name: Copy Android APK
        run: |
          find src-tauri/gen/android -name "*.apk" -type f -exec cp {} artifacts/ \;
      
      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: artifacts/*.apk

  create-release:
    needs: [build-linux, build-windows, build-android]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tauri.conf.json
        id: version
        run: |
          VERSION=$(grep -o '"version": *"[^"]*"' src-tauri/tauri.conf.json | grep -o '"[0-9.]*"' | tr -d '"')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
      
      - name: Display structure of downloaded files
        run: ls -R release-artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            release-artifacts/linux-binary/track-it-linux-x86_64
            release-artifacts/windows-binary/track-it-windows-x86_64.exe
            release-artifacts/android-apk/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
